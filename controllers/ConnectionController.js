var express = require('express');
var shortid = require('shortid'); //This package is used to generate Unique Alphanumeric Ids
const { check, validationResult } = require('express-validator');
var Connection = require('../models/connection');
var UserConnection = require('../models/userConnection');
var connectionRepositoryUtil = require('../utility/connectionDB.js');


var router = express.Router();


router.get('/connections', async function(request, response){
	var data = await connectionRepositoryUtil.getConnections();
	response.render('connections', { data: data, userSession : request.session.userSession });
});

router.get('/connection/:connectionID?',
[
	check('connectionID')
	.escape().trim()
	.bail()
	.not().isEmpty().withMessage('Connection Id is missing!')
],
 async function(request, response){
	const errors = validationResult(request);
	if (errors.isEmpty()) {
		if(shortid.isValid(request.params.connectionID)){
			var data = await connectionRepositoryUtil.getConnection(request.params.connectionID);
			if(data !== null){
				response.render('connection', { data: data, userSession : request.session.userSession }); //Successful retrieval of requested connection object
			}else{
				response.render('connection', { errors: { msg: "Requested connection is not available in database", redirect: "/connections"}}); //Requested connectionID is not available
			}	
		}else{
			response.render('connection', { errors: { msg: "ConnectionID is invalid", redirect: "/connections"}}); //connectionID is invalid, that is not generated by shortId 
		}
	}else{
		response.render('connection', { errors: { msg: errors.array()[0].msg, redirect: "/connections"}}); //connectionID is empty or contains special characters
	}
});

module.exports = router //Export the router to use in app.js